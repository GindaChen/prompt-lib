# slower version:

n, k = map(int, input().split())
s = input().rstrip()

#s = '0001111011110'
#n, k = len(s), 1

s='1'+s

k_pt = 0
cur_tail = 0
for cur in range(1, len(s)):
  cur_tail+=1

  if  s[cur-1] == '1' and s[cur] == '0':
    k_pt+=1

  if k_pt <= k:
      cur_tail-=1
  elif  s[cur_tail] == '0' and s[cur_tail+1] == '1':
    k_pt-=1

print(cur-cur_tail)


# optimized version of the same code:

n, k = map(int, input().split())
s = input().rstrip()

#s = '0001111011110'
#n, k = len(s), 1

s='1'+s

k_pt = 0
cur_tail = 0
for cur in range(1, len(s)):

  if  s[cur-1] == '1' and s[cur] == '0':
    k_pt+=1

  if k_pt > k:
    cur_tail+=1
    if s[cur_tail] == '0' and s[cur_tail+1] == '1':
      k_pt-=1

  #print((cur_tail, cur,k_pt))

print(cur-cur_tail)





# slower version:

import sys
s = input()

for i in range(len(s)):
  if (i+1) % 2 != 0:
    if s[i] == 'L':
      print('No')
      sys.exit()
      
  if (i+1) % 2 == 0:
    if s[i] == 'R':
      print('No')
      sys.exit()
print('Yes')

# optimized version of the same code:

s = input()

for i in range(len(s)):
  if (i+1) % 2 == 0:
    if s[i] == 'R':
      print('No')
      exit()
  else:
    if s[i] == 'L':
      print('No')
      exit()
print('Yes')




# slower version:

N = int(input())
my_array = []
for A in range (1, N):
    my_array.append(sum(map(int, str(A))) + sum(map(int, str(N - A))))
print(min(my_array))

# optimized version of the same code:

N = int(input())
temp_min = sum(map(int, str(1))) + sum(map(int, str(N - 1)))
for A in range (2, N):
    x = sum(map(int, str(A))) + sum(map(int, str(N - A)))
    if x < temp_min:
        temp_min = x
print(temp_min)




# slower version:

a, b, c, d = map(int, input().split())

alice = list(range(a, b+1))
bob = list(range(c, d+1))

d = [i for i in alice if i in bob]

if d == []:
    print(0)
else:
    print(d[-1]-d[0])

# optimized version of the same code:

A, B, C, D = map(int, input().split())

x = [i for i in range(A, B+1)] + [i for i in range(C, D+1)]
l = len(x) - len(set(x))
if l > 0:
    print(l-1)
else:
    print(0)




# slower version:

input()
from collections import *
c=Counter(map(int,input().split()))
print(sum(v-k*(k<=v) for k,v in c.items()))

# optimized version of the same code:

from collections import*;input();print(sum(v-k*(k<=v)for k,v in Counter(map(int,input().split())).items()))




# slower version:

def main():
    n, x, *a = map(int, open(0).read().split())
    a = [0] + a
    ans = 0
    tmp = 0
    for i, j in zip(a, a[1:]):
        i -= tmp
        if i + j - x > 0:
            c = i + j - x
            ans += c
            tmp = c
        else:
            tmp = 0

    print(ans)


if __name__ == '__main__':
    main()


# optimized version of the same code:

def main():
    n, x, *a = map(int, open(0).read().split())
    a = [0] + a
    ans = 0
    tmp = 0
    for i, j in zip(a, a[1:]):
        i -= tmp
        if (i + j - x) > 0:
            c = (i + j - x)
            ans += c
            tmp = c
        else:
            tmp = 0

    print(ans)


if __name__ == '__main__':
    main()





# slower version:

n = int(input())
can = []
for i in range(n):
  raw = input()
  now = []
  for j in range(len(raw)):
    now.append(raw[j])
  now.sort()
  can.append(now)
can.sort()
cnt = 0
ans = 0
for i in range(1,n):
  if can[i-1] == can[i]:
    cnt += 1
    ans += cnt
  else:
    cnt = 0
print(ans)

# optimized version of the same code:

#16:15
n = int(input())
can = []
for _ in range(n):
  raw = input()
  made = []
  for k in range(10):
    made.append(raw[k])
  made.sort()
  can.append(made)
can.sort()
ans = 0
combo = 0
for i in range(1,n):
  if can[i] == can[i-1]:
    combo += 1
  else:
    combo = 0
  ans += combo
print(ans)




# slower version:

a,b = map(int,input().split())
if (a*b)%2 != 0:
    print('Odd')
else:
    print('Even')


# optimized version of the same code:

a, b = map(int, input().split())
num = a*b
if num % 2==0:
    print('Even')
else:
    print('Odd')




